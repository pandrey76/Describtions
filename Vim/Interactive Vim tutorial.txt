
https://www.openvim.com/tutorial.html

1. Introduction
    1. Hello.
    2. I am an interactive Vim tutorial.
    3. I'll teach you what Vim is about without hassle. If you are in a hurry, press any key to fast forward.
    4. To practice what you've learned, try out the practice page. It has a context sensitive reference for commands.
    5. Now, let me introduce you to basics of Vim.

2. Two modes, insert and normal
    1. Vim has two basic modes. One is insert mode, in which you write text as if in normal text editor.
    2. Another is normal mode which provides you efficient ways to navigate and manipulate text.
    3. At any time, you can see which mode you are in on the status bar which is located at the top of the editor.
    4. To change between modes, use Esc for normal mode and i for insert mode
    5. Let's try it out! First, change to insert mode.
    6. Good, now you're in insert mode. Write something and change back to normal mode.
    7. Good. Let's move on to another section.

3. Basic movement: h, j, k, and l
    1. In contrast to regular text editor, you use keys h, j, k, and l instead of arrow keys to move the cursor.
    2. Let's see how it works in practice!
    3. Let's move on.

4. Word movement: w, e, b
     1. To navigate the text in terms of words, you can use keys w, b, and e (also W, B, E in real Vim).
     2. w moves to the start of next word; e moves to the end of the word; and b moves to beginning of the word.
     3. Word! Let's move on.
        w - moves to the start of next word;
        e - moves to the end of the word;
        b - moves to beginning of the word.

5. Number powered movement, e.g. 5w
   1. Moving within the text is not limited to individual keys; you can combine movement keys with a number.
      For example, 3w is the same as pressing w three times.
   2. With numbers, ain't no numbness.

6. Insert text repeatedly, e.g. 3iYes
    1. You can insert text multiple times.
    2. For example, an underline of a header might consist of 30 -s.
    3. ------------------------------
    4. With 30i- Esc, there's no need to press - 30 times.
    5. Let's try it out: insert go three times.
    6. See? 10iAll work is only playEsc.

7. Find a character, f and F
    1. To find and move to the next (or previous) occurrence of a character,
       use f and F, e.g. fo finds next o.
    2. You can combine f with a number. For example, you can find 3rd occurrence of 'q' with 3fq, que?
    3. F-f-f-ast!
8. Go to matching parentheses, %
    1. In text that is structured with parentheses or brackets,
       ( or { or [, use % to jump to the matching parenthesis or bracket.
    2. Here is (a sample) text to try that.

9. Go to start/end of line, 0 and $
    1. To reach the beginning of a line, press 0.
    2. For the end of a line, there's $.

10. Find word under cursor, * and #
    1. Find the next occurrence of the word under cursor with *, and the previous with
       *, and the previous with #.
    2. Nothing new under the cursor.

11. Goto line, g and G
    1. gg takes you to the beginning of the file; G to the end.
    2. To jump directly to a specific line, give its line number along with G.
    3. gg! G majorly rocks.
    4. Now go to the beginning of this screen with gg and then back to end with G.
    5. Go to line 2 with 2G.

12. Search, /text with n and N
    1. Searching text is a vital part of any text editor. In Vim, you press /,
       and give the text you are looking for.
    2. You can repeat the search for next and previous occurrences with n and N, respectively.(/n/e/e/d/l/e/)
    3. For advanced use cases, it's possible to use regexps that help to find
       text of particular form (In real Vim).
    4. Let's try a simple text search.
    5. Search for text and find the subsequent matches with n.

   13. Insert new line, o and O14. Removing a character, x and X15. Replacing letter under cursor, r16. Deleting, d17. Repetition with .18. Visual mode, v19. Real Vim awaits20. The end