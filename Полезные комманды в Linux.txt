

1. Получение информации об запущенном приложении со всеми библиотеками

lsof -P -T -p PID_APPLICATION

admin1@ubuntu18:~$ lsof -P -T -p 19208
    COMMAND    PID   USER   FD   TYPE DEVICE SIZE/OFF    NODE NAME
    acvp_app 19208 admin1  cwd    DIR   0,56     4096 4513806 /home/admin1/work/acvp/libacvp
    acvp_app 19208 admin1  rtd    DIR   8,33     4096       2 /
    acvp_app 19208 admin1  txt    REG   0,56   264560 4515598 /home/admin1/work/Development/ACVP/ACVP_PROJECT/SOURCE/libacvp/app/.libs/acvp_app
    acvp_app 19208 admin1  mem    REG   8,33   577312  789094 /usr/lib/x86_64-linux-gnu/libssl.so.1.1
    acvp_app 19208 admin1  mem    REG   8,33    14560 3148382 /lib/x86_64-linux-gnu/libdl-2.27.so
    acvp_app 19208 admin1  mem    REG   8,33   144976 3148394 /lib/x86_64-linux-gnu/libpthread-2.27.so
    acvp_app 19208 admin1  mem    REG   0,56  1019080 4514296 /home/admin1/work/Development/ACVP/ACVP_PROJECT/INSTALLATION/curl-7.64.1_install/lib/libcurl.so.4.5.0
    acvp_app 19208 admin1  mem    REG   8,33  2030544 3148379 /lib/x86_64-linux-gnu/libc-2.27.so
    acvp_app 19208 admin1  mem    REG   8,33  2917216  789091 /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1
    acvp_app 19208 admin1  mem    REG   0,56  1252488 4515751 /home/admin1/work/Development/ACVP/ACVP_PROJECT/INSTALLATION/libacvp_install/lib/libacvp.so.0.0.0
    acvp_app 19208 admin1  mem    REG   8,33   170960 3148375 /lib/x86_64-linux-gnu/ld-2.27.so
    acvp_app 19208 admin1    0u   CHR  136,3      0t0       6 /dev/pts/3
    acvp_app 19208 admin1    1u   CHR  136,3      0t0       6 /dev/pts/3
    acvp_app 19208 admin1    2u   CHR  136,3      0t0       6 /dev/pts/3

2. Узнаём какие опции в файле конфигурации есть, связанные с отладкой

admin1@ubuntu18:~/work/acvp/ACVP_PROJECT/SOURCE/curl-7.64.1$ ./configure --help | grep debug
  --enable-debug          Enable debug build options
  --disable-debug         Disable debug build options

  --enable-curldebug      Enable curl debug memory tracking
  --disable-curldebug     Disable curl debug memory tracking

3. Обновляем pip

python3 -m pip install --upgrade pip

4. Преобразование символа переноса на новую строку (CRLF, LF или CR)

    4.1.    dos2unix file_path (Например: dos2unix install.sh)

    4.2. Рекурсивно найдет все файлы внутри текущего каталога и вызовет для этих файлов команду dos2unix

            find . -type f -print0 | xargs -0 dos2unix

5. Удаление Директорий

    5.1. To remove an empty directory, use the rmdir

            rmdir veggies3

    5.2  To remove a directory and all its contents, including any subdirectories and files, use the rm command
            with the recursive option, -r.

            rm -r veggies3

6. Генерация SSL сертификата

    6.1. sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt

    Или

    6.2. openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /home/admin1/ssl/selfsigned.key -out /home/admin1/ssl/selfsigned.crt


7. Поиск с Regex
    Ищем файлы вида: sandbox-gmon.16130

    find . * | grep -P ".*sandbox-gmon[.].*"
        или более точный
     find .  -type f | grep -P ".*sandbox-gmon[.][0-9]*"

    А теперь вместе с их удалением
     find . -type f | grep -P ".*sandbox-gmon[.][0-9]*" | xargs rm

8. Установка venv

    python3 -m venv /path/to/new/virtual/environment

9. Замена в файле с помощью команды sec

    sed 's/test/another test/' myfile

    Пример
        sed -i 's!https://%s!http:\\%s!' acvp_transport.c
        Замена "https://%s" на "http://%s"

        В качестве разделителя может использоваться любой символ который идёт после 's' (/, ! и т.д.).

10. Кодирование/Декодирование в base64

Кодирование строк
///////////////////////////////////////////////

admin1@ubuntu18:~$ echo "1234567890" | base64
MTIzNDU2Nzg5MAo=
admin1@ubuntu18:~$ Encoded=$(echo "1234567890" | base64)
admin1@ubuntu18:~$ $Encoded
MTIzNDU2Nzg5MAo=: команда не найдена

///////////////////////////////////////////////

Декодирование строк
///////////////////////////////////////////////

admin1@ubuntu18:~$ echo "MTIzNDU2Nzg5MAo="|base64 --decode
1234567890
admin1@ubuntu18:~$ echo $Encoded|base64 --decode
1234567890

или с пробелами

admin1@ubuntu18:~$ echo $Encoded | base64 --decode
1234567890


admin1@ubuntu18:~$ echo "1234567890" | base64
MTIzNDU2Nzg5MAo=
admin1@ubuntu18:~$ echo "MTIzNDU2Nzg5MAo=" | base64 --decode
1234567890

Значение b"MTIzNDU2Nzg5MA==" получено с помощью Python (библиотека base64)

admin1@ubuntu18:~$ echo "MTIzNDU2Nzg5MA==" | base64 --decode
1234567890admin1@ubuntu18:~$
admin1@ubuntu18:~$ echo "MTIzNDU2Nzg5MA==" | base64 --decode
1234567890admin1@ubuntu18:~$

///////////////////////////////////////////////

Кодирование файла
///////////////////////////////////////////////


admin1@ubuntu18:~$ echo "Some string for demonstrating base64 encoding and decoding" > Some.txt
admin1@ubuntu18:~$ cat Some.txt
Some string for demonstrating base64 encoding and decoding

admin1@ubuntu18:~$ base64 Some.txt
U29tZSBzdHJpbmcgZm9yIGRlbW9uc3RyYXRpbmcgYmFzZTY0IGVuY29kaW5nIGFuZCBkZWNvZGlu
Zwo=

admin1@ubuntu18:~$ base64 Some.txt > encodedData.txt
admin1@ubuntu18:~$ cat encodedData.txt
U29tZSBzdHJpbmcgZm9yIGRlbW9uc3RyYXRpbmcgYmFzZTY0IGVuY29kaW5nIGFuZCBkZWNvZGlu
Zwo=

///////////////////////////////////////////////

Декодирование файла
///////////////////////////////////////////////

admin1@ubuntu18:~$ base64 -d encodedData.txt
Some string for demonstrating base64 encoding and decoding
admin1@ubuntu18:~$ base64 --decode encodedData.txt > originalData.txt
admin1@ubuntu18:~$ cat originalData.txt
Some string for demonstrating base64 encoding and decoding

///////////////////////////////////////////////



